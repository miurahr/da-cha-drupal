<?php
/* $Id: node_template.module,v 1.1.2.1 2006/12/15 18:26:55 alexb Exp $ */

/**
 * @file
 * Create "templates" of nodes for other modules to use.
 * Sponsored by Development Seed.
 * Sponsored by John Bransford.
 */

/*
   Copyright (C) 2006 by Marcin Konicki <ahwayakchih@gmail.com>
   Also depends on other modules from Drupal basic distribution and, in some cases, contains parts of their code.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY.

   See the LICENSE file for more details.
*/

/**
 * node_template_load(). Returns node ready to be saved as "new", or cloned or whatever :).
 */
function node_template_load($nid) {
	global $node_templates;
  if (!is_array($node_templates)) {
    $node_templates = array();
  }

  if (isset($node_templates[$nid])) {
    return $node_templates[$nid];
  }

  // Load template data. If it doesn't exist, return
  $result = db_query('SELECT * FROM {node_template} WHERE nid = %d', $nid);
  if ($result) {
    $template = db_fetch_object($result);
  }

  if (!$template || $template->nid == NULL) {
    return NULL;
  }

  // Load node
  $node_templates[$nid] = node_load($nid);
  if (!$node_templates[$nid]->nid) {
    unset($node_templates[$nid]);
    return NULL;
  }

  // Attach php_save code, so we can use it later without checking database again
  $node_templates[$nid]->node_template = $template;

  // Run php code for template. Make node "local" for that code.
  drupal_eval('<?php global $node_templates; $node = &$node_templates['.$nid.'];?>'.$node_templates[$nid]->node_template->php_load);

  // Let other modules prepare template (they should remove unique data so it's safe to clone as many times as possible ;)
  node_invoke_nodeapi($node_templates[$nid], 'template');

  // TODO: Cleanup node. This part can be removed in future, if modules will implement nodeapi 'template' operation
  unset($node_templates[$nid]->nid); // make it "new" node :)
  unset($node_templates[$nid]->path); // avoid path alias conflicts!
  unset($node_templates[$nid]->parent_node); // avoid messing up relativity module's data :)
  unset($node_templates[$nid]->uid); // do not copy ownership of node :)
  unset($node_templates[$nid]->name); // do not copy ownership of node :)

  return $node_templates[$nid];
}

/**
 * node_template_save(). Returns errors if node doesn't validate, or NULL if all is ok.
 */
function node_template_save(&$node) {
  // avoid "content modified by another user" error in case when item is updated
  // (so it already exists in database). It's because we use feed as template for each item,
  // so it certainly will have older "changed" date than item in database (and will get error, if we not change it :)
  $node->changed = time();
  $_POST['edit']['changed'] = time();

  // Make sure node has owner
  if (!$node->uid || !$node->name) {
    global $user;
    $node->uid = $user->uid;
    $node->name = $user->name;
  }

  if ($node->node_template && $node->node_template->php_save) {
    // Run php code for template. Make node "local" for that code.
    drupal_eval('<?php global $node_templates; $node = &$node_templates['.$node->node_template->nid.'];?>'.$node->node_template->php_save);
  }

  node_object_prepare($node);
  node_validate($node);

  // TODO: form_get_errors keeps errors from ALL forms :( It doesn't clear them and there's no way to clear them :((
  if (!($errors = form_get_errors())) {
    $node = node_submit($node);
    node_save($node);
  }
  else {
    return $errors;
  }
}

/**
 * node_template_list(); Returns array with nid numbers as keys and template titles as values.
 */
function node_template_list() {
  static $templates;

  if (!is_array($templates)) {
    $templates = array();
    // Get nids and titles from database
    $result = db_query('SELECT nt.nid, nt.title, n.type FROM {node_template} nt, {node} n WHERE nt.nid = n.nid ORDER BY title ASC');

    while ($temp = db_fetch_object($result)) {
      $templates[$temp->nid] = $temp->title . ' ('. $temp->type .')';
    }
  }

  return $templates;
}

/**
 * Implementation of hook_help().
 */
function node_template_help($section) {
  switch ($section) {
    case 'admin/help#node_template':
      return t('Create "templates" of nodes for other modules to use.');
    case 'admin/modules#description':
      return t('Create "templates" of nodes for other modules to use.');
  }
}

/**
 * Implementation of hook_perm().
 */
function node_template_perm() {
  return array('create node templates', 'delete node templates');
}

/**
 * Implementation of hook_menu().
 */
function node_template_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'admin/node_templates', 'title' => t('node templates'),
                     'callback' => 'node_template_list_page');
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->nid) {
        $items[] = array('path' => 'node/'. arg(1) .'/template', 'title' => t('template'),
          'callback' => 'node_template_page',
          'access' => user_access('create node templates'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK);
      }
    }
  }

  return $items;
}

/**
 * Implementation of form_validate().
 */
function node_template_form_validate($form_id, $form_values) {
  if (!isset($form_values['nid'])) {
    form_set_error('nid', t('Invalid ID of node.'));
  }

  if (!isset($form_values['title']) || strlen(trim($form_values['title'])) < 1) {
    form_set_error('title', t('You need to fill in title field.'));
  }
}

/**
 * Implementation of form_submit().
 */
function node_template_form_submit($form_id, $form_values) {
  // Save template data
  switch ($_POST['op']) {
    case t('Create'):
      db_query("INSERT INTO {node_template} (nid, title, php_load, php_save) VALUES (%d, '%s', '%s', '%s')", $form_values['nid'], $form_values['title'], $form_values['php_load'], $form_values['php_save']);
      break;

    case t('Update'):
      db_query("UPDATE {node_template} SET title = '%s', php_load = '%s', php_save = '%s' WHERE nid = %d", $form_values['title'], $form_values['php_load'], $form_values['php_save'], $form_values['nid']);
      break;

    case t('Delete'):
      db_query('DELETE FROM {node_template} WHERE nid = %d', $form_values['nid']);
      break;
  }

  return 'node/'. $form_values['nid'] .'/';
}

/**
 * Menu callback; Present form to user
 */
function node_template_page() {
  if (!is_numeric(arg(1))) {
    drupal_set_title('');
    return node_page_default();
  }

  $node = node_load(arg(1));
  if (!$node->nid) {
    if (db_result(db_query('SELECT nid FROM {node} WHERE nid = %d', arg(1)))) {
      drupal_access_denied();
    }
    else {
      drupal_not_found();
    }
  }
  drupal_set_title(t('Template edit'));

  // Load template data
  $result = db_query('SELECT * FROM {node_template} WHERE nid = %d', $node->nid);
  if ($result) {
    $template = db_fetch_object($result);
  }

  // Set the id of the top-level form tag
  $form['#id'] = 'node-template-form';

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid
  );

  $form['title'] = array (
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $template->title ? $template->title : 'Template of '. $node->title,
    '#rows' => 20,
    '#required' => TRUE,
    '#description' => t('Title will be used in list of templates. Try to use it as a kind of very short description :).')
  );

  $form['php_load'] = array (
    '#type' => 'textarea',
    '#title' => t('Loading PHP code'),
    '#default_value' => $template->php_load,
    '#rows' => 20,
    '#description' => t('This PHP code will be run after original node is loaded, before template is created. It will be run only once, not every time template node is prepared. Variable $node is full copy of original node, which You can change before it will be cloned to create new nodes. Changes You make with PHP code here will not affect original node.')
  );

  $form['php_save'] = array (
    '#type' => 'textarea',
    '#title' => t('Saving PHP code'),
    '#default_value' => $template->php_save,
    '#rows' => 20,
    '#description' => t('This PHP code will be run at saving time. It will be run each time new node is created from template, when that new node is saved. Variable $node is full copy of original node, which You can change before it will be cloned to create new nodes.')
  );


  $form['submit'] = array('#type' => 'submit', '#value' => $template->nid ? t('Update') : t('Create'), '#weight' => 45);
  if ($template->nid && user_access('delete node templates')) {
    $form['delete'] = array('#type' => 'submit', '#value' => t('Delete'), '#weight' => 50);
  }

  $form['#node'] = $node;

  return drupal_get_form('node_template_form', $form, 'node_form');
}

/**
 * Menu callback; Present list of templates to admin
 */
function node_template_list_page() {
  $templates = node_template_list();

  $header = array(t('Title'), t('Type'), t('Operations'));
  $rows = array();
  foreach ($templates as $nid => $title) {
    $info = explode('(', $title);
    $title = trim($info[0]);
    $type = trim(str_replace(')', '', $info[1]));
    $row = array();
    $row[] = $title;
    $row[] = $type;
    $row[] = l(t('edit'), 'node/'. $nid . '/template');
    $rows[] = $row;
  }

  return theme('table', $header, $rows);
}
