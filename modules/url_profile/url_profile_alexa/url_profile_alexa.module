<?php
/* $Id: url_profile_alexa.module,v 1.2 2006/12/15 21:53:59 alexb Exp $ */

/**
 * @file
 * Gather information about URL from Alexa.
 * Sponsored by Development Seed.
 * Developed by Aron Novak <aaron at szentimre dot hu>
 * 
 * Requirements: php4-mhash package, exactly the mhash function
 */

define("ACCESS_KEY", variable_get('url_profile_alexa_accesskey', ''));
define("SECRET_ACCESS_KEY", variable_get('url_profile_alexa_secretkey', ''));
define("SERVICE", "AlexaWebInfoService");
define("OPERATION", "UrlInfo");
define("RESPONSE_GROUP", "Rank,SiteData");

/**
 * Implementation of hook_menu()
 */
function url_profile_alexa_menu($may_cache) {
  $items[] =   array('path' => 'url_profile_alexa/show_image',
  'title' => t('Show alexa thumbnail'),
  'callback' => 'alexa_show_thumbnail',
  'access' => TRUE,
  'type' => MENU_CALLBACK);
  $items[] =   array('path' => 'url_profile_alexa/retrieve_feed',
  'title' => t('Refresh alexa feed'),
  'callback' => 'alexa_refresh_feed',
  'access' => TRUE,
  'type' => MENU_CALLBACK);
  return $items;
}

/**
 * Manually force to refresh a specific feed
 *
 * @param integer $upid
 * @return string The status message
 */
function alexa_refresh_feed($upid) {
  $result = db_query("SELECT * from {url_profile_url} WHERE upid = %d", $upid);
  $url = db_fetch_object($result);
  $result = db_query_range('SELECT * FROM {url_profile_alexa} WHERE upid = %d ORDER BY checked DESC', $url->upid, 0, 1);
  if ($result) {
    $url->alexa = db_fetch_object($result);
    if (!$url->alexa->upid) {
      unset($url->alexa);
    }
  }
  if (alexa_get_info($url, TRUE) == FALSE) {
    drupal_set_message(t("Failed to retrieve Alexa data for")." ".$url->url, 'error' );
  }
  else {
    drupal_set_message(t("Successfully retrieved Alexa data for")." ".$url->url);
  }
  
  if ($_GET['destination']) {
    drupal_goto($_GET['destination']);
  }
}


/**
 * Retrieve and show the site thumbnail
 *
 * @param integer $upid
 */
function alexa_show_thumbnail($upid) {
  header('Content-type: image/jpeg');
  $img_path = alexa_generate_img_path($upid);
  $img_fp = fopen($img_path, 'r');
  fpassthru($img_fp);
  fclose($img_fp);
}

/**
 * Implementation of hook_help().
 */
function url_profile_alexa_help($section) {
  switch ($section) {
    case 'admin/help#url_profile_alexa':
      return t('Gathers information about URLs from Alexa.  <em>Requires leech and url_profile module.</em>.');
    case 'admin/modules#description':
      return t('Gathers information about URLs from Alexa. <em>Requires leech and url_profile module</em>.');
  }
}

function url_profile_alexa_settings() {
  if (!user_access('administer Alexa data')) {
    return;
  }
  $form['url_profile_alexa_accesskey'] = array(
  '#type' => 'textfield',
  '#title' => t('Amazon Access key'),
  '#default_value' => variable_get('url_profile_alexa_accesskey', ''),
  '#size' => 60,
  '#maxlength' => 60,
  '#description' => t('To use any of the Amazon APIs You need to have a API key. You can get it from %link', array('%link' => l('http://www.technorati.com/developers/apikey.html', 'http://www.amazon.com/aws/'))),
  '#required' => TRUE,
  );
  $form['url_profile_alexa_secretkey'] = array(
  '#type' => 'textfield',
  '#title' => t('Amazon Secret key'),
  '#default_value' => variable_get('url_profile_alexa_secretkey', ''),
  '#size' => 60,
  '#maxlength' => 60,
  '#description' => t('To use any of the Amazon APIs You need to have secret key. You can get it from %link', array('%link' => l('http://www.technorati.com/developers/apikey.html', 'http://www.amazon.com/aws/'))),
  '#required' => TRUE,
  );
  $form['url_profile_alexa_cache_lifetime'] = array(
  '#type' => 'textfield',
  '#title' => t('Alexa data cache lifetime (days)'),
  '#default_value' => variable_get('url_profile_alexa_cache_lifetime', '30'),
  '#size' => 60,
  '#maxlength' => 60,
  '#description' => t('Get new data from Alexa after given number of days.'),
  '#required' => FALSE,
  );
  $form['url_profile_alexa_thumbnail_limit'] = array(
  '#type' => 'textfield',
  '#title' => t('Maximum total number of thumbnail queries allowed by the module'),
  '#default_value' => variable_get('url_profile_alexa_thumbnail_limit', '0'),
  '#size' => 60,
  '#maxlength' => 60,
  '#description' => t('0 (zero) means no limit. Current total of requested thumbnails: ') . variable_get('url_profile_alexa_thumbnail_numbers', 0),
  '#required' => FALSE,
  );
  $form['url_profile_alexa_use_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Alexa title'),
    '#default_value' => variable_get('url_profile_alexa_use_title', 0),
    '#description' => t('If enabled, module will overwrite title of URL profiles with the title retrieved from Alexa.'),
  );
  
  return $form;
}

/**
 * Implements hook_permissions
 */
function url_profile_alexa_perm() {
  return array('access Alexa data', 'administer Alexa data');
}

/**
 * Own cron function to ensure update of alexa datas
 *
 */
function url_profile_alexa_cron() {
  /*
  
  $result = db_query('SELECT upid 
                      FROM {url_profile_url}'
  );
  if (db_num_rows($result) < 1) {
    return;
  }
  $failed = array();
  while ($temp = db_fetch_object($result)) {
    $url = url_profile_load($temp->upid);
    if(!alexa_get_info($url)) {
      $failed[] = $temp->upid;
    }
  }
  if (count($failed) > 0) {
    watchdog('url_profile_alexa', t('Alexa information retrieval failed (%upids)', array('%upids' => implode(', ', $failed))), WATCHDOG_ERROR);
  }
  */
}

/**
 * Return all the data fields
 *
 * @param url_profile $url
 * @return string Themed table
 */
function theme_url_profile_alexa($url) {
  if (!user_access('access Alexa data')) {
    return;
  }
  if (isset($url->alexa->title) || isset($url->alexa->desc) || isset($url->alexa->rank) || isset($url->alexa->createtime)) {
    $table = array(
    array(t('Title'), $url->alexa->title),
    array(t('Description'), $url->alexa->desc),
    array(t('Rank'), $url->alexa->rank),
    array(t('Creation time'), strftime('%D', $url->alexa->createtime)),
    array(t('Site thumbnail'), l('<img src="' . check_url('?q=url_profile_alexa/show_image/' . $url->upid) . '" />', $url->url, array('target' => '_alexa_'.$url->url), NULL, NULL, FALSE, TRUE)),
    );
  } else {
    $table = array(
    array(t('Title'), t('Alexa information has not been retrieved yet.'))
    );
  }
  if (user_access('administer Alexa data')) {
    $retrieve = l(t('Retrieve Alexa information now'), check_url('url_profile_alexa/retrieve_feed/' . $url->upid), array(), 'destination='.$_GET['q'] );
  }
  
  $output = '<h2>Alexa info</h2>';
  $output.= theme_table(array(), $table, array()) . $retrieve;
  return $output;
}

/**
 * Show the image of the site
 *
 * @param url_profile $url
 * @return string The image
 */
function theme_url_profile_thumbnail($url) {
  if (!user_access('access Alexa data')) {
    return;
  }
  return '<img src="' . check_url('url_profile_alexa/show_image/' . $url->upid) . '" />';
}

/**
 * Show the title of the site
 *
 * @param url_profile $url
 * @return string The title
 */
function theme_url_profile_title($url) {
  if (!user_access('access Alexa data')) {
    return;
  }
  return $url->alexa->title;
}

/**
 * Show the description of the site
 *
 * @param url_profile $url
 * @return string The description
 */
function theme_url_profile_desc($url) {
  if (!user_access('access Alexa data')) {
    return;
  }
  return $url->alexa->desc;
}

/**
 * Show the rank of the site
 *
 * @param url_profile $url
 * @return string The rank
 */
function theme_url_profile_rank($url) {
  if (!user_access('access Alexa data')) {
    return;
  }
  return $url->alexa->rank;
}

/**
 * Show the creation time of the site
 *
 * @param url_profile $url
 * @return string The creation time
 */
function theme_url_profile_created($url) {
  if (!user_access('access Alexa data')) {
    return;
  }
  return strftime('%D', $url->alexa->createtime);
}

/**
 * Implementation of hook_url_profile().
 */
function url_profile_alexa_url_profile(&$url, $op, $arg = NULL) {
  if (!function_exists('mhash')) {
    drupal_set_message('Requirements: php4-mhash package, exactly the mhash function.', 'error');
    return;
  }
  if ($url->parent_upid != 0 || !user_access('access Alexa data')) {
    return;
  }
  switch ($op) {
    case 'list':
      break;

    case 'load':
      
      $result = db_query_range('SELECT * FROM {url_profile_alexa} WHERE upid = %d ORDER BY checked DESC', $url->upid, 0, 1);
      
      if ($result) {
        $url->alexa = db_fetch_object($result);
        if (!$url->alexa->upid) {
          unset($url->alexa);
        }
      }
      break;
      
     case 'check':
      alexa_get_info($url);
      break;

    case 'insert':
      break;

    case 'update':
      break;

    case 'delete':
      db_query('DELETE FROM {url_profile_alexa} WHERE upid = %d', $url->upid);
      break;
      
    case 'view':
      return theme('url_profile_alexa', $url);
      break;

    default:
      break;
  }
}

/**
 * Get informations of an URL with the aid of Alexa Web Information Service
 * http://docs.amazonwebservices.com/AlexaWebInfoService/1-0/
 *
 * @param string $site_url The site's url
 * @param bool $force_real_data If TRUE the cache musn't be used
 * @return 
 */
function alexa_get_info($url, $force_real_data = FALSE) {
  if (ACCESS_KEY == '' || SECRET_ACCESS_KEY == '') {
    drupal_set_message(t('Please configure Alexa API datas at settings/url_profile/alexa before try to use the module!'), 'error');
    return;
  }
  $seconds_in_a_day = 86400;
  if ((time() - $url->alexa->checked > variable_get('url_profile_alexa_cache_lifetime', 0)*$seconds_in_a_day) && variable_get('url_profile_alexa_cache_lifetime', 0) != 0) {
    $force_real_data = TRUE;
  }
  if (alexa_is_in_cache($url) == TRUE && !$force_real_data) {
    // Use the cache
    return alexa_get_from_cache($url);
  }
  $site_url = $url->url;
  $awis_data = generate_rest_url($site_url);
  $response = make_http_request($awis_data["request_url"]);
  $parser = xml_parser_create("UTF-8");
  $values = array();
  $indexes = array();
  xml_parse_into_struct($parser, $response, $values, $indexes);
  if (array_search('ERROR', array_keys($indexes)) == FALSE) {
    if (strpos(alexa_search_field($values, 'TITLE'), "We're sorry!") !== false) {
      watchdog('url_profile_alexa', t('Alexa information retrieval failed (%upid)', array('%upid' => $url->upid)), WATCHDOG_ERROR);
      return FALSE;
    }
    $values = array(
    'Url' =>         $site_url,
    'Rank' =>        alexa_search_field($values, 'RANK'),
    'Title' =>       alexa_search_field($values, 'TITLE'),
    'Description' => alexa_search_field($values, 'DESCRIPTION'),
    'Date' =>        alexa_search_field($values, 'ONLINESINCE'),
    'Thumbnail' =>   alexa_get_thumbnail($site_url),
    );
    alexa_put_in_cache($url, $values, $force_real_data);
    return $values;
  }
  else {
    return FALSE;
  }
}

/**
 * Check if a given profile's alexa data is cached or not
 *
 * @param integer $upid
 * @return bool Returns TRUE if cached. Returns FALSE if not cached
 */
function alexa_is_in_cache($url_id) {
  
  if (is_numeric($url_id)){
    $upid = $url_id;
  }
  else {
    $upid = $url_id->upid;
  }
  
  static $urls = array();
  if (isset($urls[$upid]))
    return $urls[$upid];
  
  $result = db_query("SELECT upid FROM {url_profile_alexa} WHERE upid = %d", $upid);
  if (db_num_rows($result) < 1) {
    // do not cache negative results, that could change in one page call
    return FALSE;
  }
  else {
    $urls[$upid] = TRUE;
    return TRUE;
  }
}

function alexa_get_from_cache($url) {
  $result = db_query("SELECT * FROM {url_profile_alexa} WHERE upid = %d ORDER BY checked DESC", $url->upid);
  if (db_num_rows($result) < 1) {
    return FALSE;
  }
  else {
    $response = db_fetch_object($result);
    $values = array(
    'Url' =>         $url->url,
    'Rank' =>        $response->rank,
    'Title' =>       $response->title,
    'Description' => $response->desc,
    'Date' =>        strftime("%D", $response->createtime),
    'Thumbnail' =>   $response->thumbnail,
    );
    return $values;
  }
}

/**
 * Return the url_profile's image path
 *
 * @param integer $upid The id of profile
 * @return string The path to the image
 */
function alexa_generate_img_path($upid) {
  return file_create_path(file_directory_path() . '/alexa_imgs/url_profile_'. $upid .'.jpg');
}

/**
 * Cache the retrieved fields into SQL table
 *
 * @param object $url URL object
 * @param array $values The data fields
 */
function alexa_put_in_cache($url, $values) {

  global $user;
  $created = strtotime($values['Date']);
  $path_to_files = file_create_path(file_directory_path() . '/alexa_imgs');
  if (!file_exists($path_to_files)) {
    mkdir($path_to_files);
  }
  $img_path = alexa_generate_img_path($url->upid);
  $content = $values['Thumbnail'];
  alexa_put_img($img_path, $content);

  /*$node_exists = false;
  if (is_numeric($url->alexa->thumbnail) && $url->alexa->thumbnail != 0) {
  $node = node_load($url->alexa->thumbnail);
  $node_exists = true;
  }
  else {
  $node =& new stdClass();
  }
  $node->promote  = 0;
  $node->status   = 1;
  $node->sticky   = 0;
  $node->revision = 0;
  $node->moderate = 0;
  $node->comment  = 0;
  $node->type       = 'image';
  $node->uid        = $user->uid;
  $node->title      = $values['Title'];
  $node->body       = $values['Description'];
  $node->teaser     = $node->body;
  $node->created    = time();
  $node->changed    = time();
  //$node->images     = array();
  $node->images['_original'] = $img_path;

  $node = node_submit($node);
  _image_build_derivatives($node);
  node_save($node);
  */

  $insert_query = "INSERT INTO {url_profile_alexa} VALUES (%d, %d, %d, '%s', '%s', %d)";

  db_query($insert_query,
  $url->upid,
  time(),
  $values['Rank'],
  $values['Title'],
  $values['Description'],
  $created);
  
  if(variable_get('url_profile_alexa_use_title', 0) && ($url->criteria == "")) {
    // We're sorry -> todo: fix this on get_info() we shouldn t save failed requests
    if ((trim($values['Title']) != "") && (trim($values['Title']) != "We're sorry!")) {
      db_query("UPDATE {url_profile_url} SET title = '%s' WHERE upid = %d", $values['Title'], $url->upid);
    }
  }
}

/**
 * If run PHP4, need to define file_put_contents. In PHP5 this is native function
 *
 * @param string $filename
 * @param mixed $data
 * @return integer Written bytes
*/
function alexa_put_img($filename, $data) {
  $mode = 'w';
  $file = @fopen($filename, $mode);
  if ($file === false) {
    return 0;
  }
  else {
    $bytes_written = fwrite($file, $data);
    fclose($file);
    return $bytes_written;
  }
}

/**
 * Get the image data with the help of Alexa API
 *
 * @param string $site_url
 * @return string Binary data of the image
 */
function alexa_get_thumbnail($site_url) {
  // We limit the maximal possible queries because query == money
  $max_query = variable_get('url_profile_alexa_thumbnail_limit', 0);
  $curr_query = variable_get('url_profile_alexa_thumbnail_numbers', 0);
  if ($curr_query > $max_query && $max_query != 0) {
    drupal_set_message(t('Maximum number of thumbnail queries exceeded.  Adjust on settings page if required.'), 'error');
    return FALSE;
  } 	
  $timestamp =  generate_timestamp();
  $url_enc = urlencode($site_url);
  $timestamp_enc = urlencode($timestamp);
  $signature_enc = urlencode(calculate_RFC2104HMAC("AlexaSiteThumbnail". "Thumbnail". $timestamp, SECRET_ACCESS_KEY));
  $request_url =  "http://ast.amazonaws.com/xino/?"
  . "Service=".           "AlexaSiteThumbnail"
  . "&Action=".           "Thumbnail"
  . "&AWSAccessKeyId=".   ACCESS_KEY
  . "&Timestamp=" .       $timestamp_enc
  . "&Signature=" .       $signature_enc
  . "&Size=" .            'Large'
  . "&Url=" .             $url_enc;
  $response = make_http_request($request_url);
  $parser = xml_parser_create("UTF-8");
  $values = array();
  $indexes = array();
  xml_parse_into_struct($parser, $response, $values, $indexes);
  if (array_search('ERROR', array_keys($indexes)) == FALSE) {
    variable_set('url_profile_alexa_thumbnail_numbers', $curr_query + 1);
    ob_start();
    $file_content = file_get_contents($values[6]['value']);
    $error = ob_get_clean();
    if (strlen($error) > 0) {
      watchdog('alexa', t('Image download from Alexa API failed.'), WATCHDOG_ERROR);
    } else {
      return file_get_contents($values[6]['value']);
    }
  }
  else {
    watchdog('alexa', t('Image download from Alexa API failed.'), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Search in xml_parse_into_struct function result for a field
 *
 * @param array $array
 * @param string $field
 * @return string The value of the field
 */
function alexa_search_field($array, $field) {
  foreach($array as $element) {
    if ($element['tag'] == $field) {
      return $element['value'];
    }
  }
  return '';
}

/**
 * Generate URL for alexa wis
 *
 * @param string $site_url The URL of the site (without http://)
 * @return string The query URL
 */
function generate_rest_url($site_url) {
  $timestamp =  generate_timestamp();
  $site_enc = urlencode($site_url);
  $timestamp_enc = urlencode($timestamp);
  $signature_enc = urlencode (calculate_RFC2104HMAC(SERVICE . OPERATION . $timestamp, SECRET_ACCESS_KEY));
  return  array("request_url" => "http://awis.amazonaws.com/onca/xml?"
  . "Service=".         SERVICE
  . "&Operation=".      OPERATION
  . "&AWSAccessKeyId=". ACCESS_KEY
  . "&ResponseGroup=".  RESPONSE_GROUP
  . "&Timestamp=".      $timestamp_enc
  . "&Signature=".      $signature_enc
  . "&Url=".            $site_enc,
  "signature" => $signature_enc);
}


/**
 * Calculate the SHA1 hash of gived data with the <var>$key</var>
 *
 * @param string $data Data
 * @param string $key Key
 * @return string Encoded data
 */
function calculate_RFC2104HMAC($data, $key) {
  return base64_encode(mhash(MHASH_SHA1, $data, $key));
}

/**
 * Timestamp format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
 *
 * @return integer Current timestamp in UTC
 */
function generate_timestamp() {
  return gmdate("Y-m-d\TH:i:s.\\0\\0\\0\\Z", time());
}

/**
 * Make a HTTP request to the given <var>$url</var>
 *
 * @param string $url
 * @return string The content of the <var>$url</var>
 */
function make_http_request($url) {
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_TIMEOUT, 4);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $result = curl_exec($ch);
  curl_close($ch);
  return $result;
}

?>