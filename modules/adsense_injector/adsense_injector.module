<?php

  /*  $Id: adsense_injector.module,v 1.1 2007/01/07 20:22:07 inactivist Exp $ */

  /**
   * Inject adsense ads into node content automatically.
   *
   * Copyright (c) 2006 Exodus Development, Inc.  All Rights Reserved. 
   * Licensed under the terms of the GNU Public License (GPL) version 2.  Please see LICENSE.txt for
   * license terms.  Posession and use of this code signifies acceptance of license
   * terms.
   *
   * Visit Exodus Development at
   * http://exodusdev.com exodusdev@gmail.com
   *
   * Project homepage: 
   * http://exodusdev.com/drupal/4.7/modules/adsense_injector.module
   *
   * The purpose of this module is to provide a simple method of automatically placing 'inline'
   * adsense module content into a full-page view of selected node types.  
   * It does this by intercepting node rendering using hook_nodeapi during 'page' rendering, 
   * and injecting selected text into the $node->body field.  
   *
   * It uses a very simple scheme at present (just string concatenation) 
   * and could be enhanced greatly by using regular expressions, templates, 
   * or other techniques in a later revision.
   */
    
define('ADSENSE_INJECTOR_MODULE_VERSION', '$Id: adsense_injector.module,v 1.1 2007/01/07 20:22:07 inactivist Exp $' );
define('ADSENSE_INJECTOR_INSERT_BODY_AD_DEFAULT', FALSE);
define('ADSENSE_INJECTOR_BODY_AD_PREFIX_DEFAULT', '<div style="float:left; margin: 0 1em .25em 0;" class="ad-auto-inserted">');
define('ADSENSE_INJECTOR_BODY_ADSENSE_FORMAT_DEFAULT', '200x200');
define('ADSENSE_INJECTOR_BODY_ADSENSE_GROUP_DEFAULT', 1);
define('ADSENSE_INJECTOR_BODY_ADSENSE_CHANNEL_DEFAULT', 1);
define('ADSENSE_INJECTOR_BODY_AD_SUFFIX_DEFAULT', '</div>');
define('ADSENSE_INJECTOR_BODY_AD_BODY_SUFFIX_DEFAULT', '<br class="clear" />');
define('ADSENSE_INJECTOR_BODY_MINWORDS_DEFAULT', 75);

/**
 * Prefix for variable table entries - append node type name, store as boolean
 * value, nonzero means insert ad content 
 */

define('ADSENSE_INJECTOR_INSERT_BODY_AD_NODETYPE', 'adsense_injector_nodetype_');

/**
 * Implementation of hook_help().
 */
function adsense_injector_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Automatically insert adsense ads into node content.  <strong>Requires adsense.module</strong>');
  }
}

/**
 * Count words in a string.
 * @param $str ref to a string (ref so no copy)
 * @param $max max # of words we care about.  Return value will never exceed this.
 * @return the count of words, where delimiter is one or more spaces
 * @todo Efficiency, find better way to do this
 */
function _adsense_injector_count_words(&$str, $max=100) {
  return count(explode(' ', $str, $max)); // lifted from node.module node_validate() function.
}


/**
 * Cound multibyte-charactor number in a string.
 * @param $str ref to a string (ref so no copy)
 * @param $max ignore this. just for compatibility. 
 * @return the count of charactors.
 * @todo Efficiency, find better way to do this
 */
function _adsense_injector_count_chars(&$str, $max) {
  return mb_strlen($str);
}

/**
 * Get the minimum node body wordcount for insertion.  
 * May be content-type specific, but at present, it's
 * global to all node types.
 * @param $nodetype the node type
 * @param $defval the default value
 * @return The minimum insertion wordcount
 */
function _adsense_injector_minwords_cfg($nodetype, $defval=75) {
  return variable_get('adsense_injector_body_minwords', $defval);
}

/**
 * Implementation of hook_nodeapi.
 * If rendering a full page, and the node type one of the configured types,
 * inject configured adsense content using simple string concatenation.
 * @todo: Evaluate efficiency of string concat vs. sprintf, other methods.
 */ 
function adsense_injector_nodeapi(&$node, $op, $teaser, $page) {
  // insert an ad into the body.
  if ($page) {
    if (variable_get('adsense_injector_insert_body_ad', ADSENSE_INJECTOR_INSERT_BODY_AD_DEFAULT) 
        && module_exist('adsense')
        && variable_get(ADSENSE_INJECTOR_INSERT_BODY_AD_NODETYPE . $node->type, FALSE)        
        && _adsense_page_match() ) {
      $minwords = _adsense_injector_minwords_cfg($node->type);
      $wordcount = _adsense_injector_count_words($node->body);
      if ($wordcount < $minwords) {
         $mbcharcount =  _adsense_injector_count_chars($node->body);
         if ($mbcharcount < ($minwords * 5)) {
	     return;
	 }
      } 
        $node->body = "<!-- adsense_injector: node body wordcount = $wordcount, required=$minwords - insertion triggered. -->" 
          . variable_get('adsense_injector_body_ad_prefix', ADSENSE_INJECTOR_BODY_AD_PREFIX_DEFAULT)
          . adsense_display(
                            variable_get('adsense_injector_body_adsense_format', ADSENSE_INJECTOR_BODY_ADSENSE_FORMAT_DEFAULT), 
                            variable_get('adsense_injector_body_adsense_group', ADSENSE_INJECTOR_BODY_ADSENSE_GROUP_DEFAULT),
                            variable_get('adsense_injector_body_adsense_channel', ADSENSE_INJECTOR_BODY_ADSENSE_CHANNEL_DEFAULT))
          . variable_get('adsense_injector_body_ad_suffix', ADSENSE_INJECTOR_BODY_AD_SUFFIX_DEFAULT)
          . $node->body 
          . variable_get('adsense_injector_body_ad_body_suffix', ADSENSE_INJECTOR_BODY_AD_BODY_SUFFIX_DEFAULT);
      } else {
        $node->body = "<!-- adsense_injector: node body word count ($wordcount) is insufficient ($minwords required), so we won't insert an ad. -->" . $node->body;
    }
  }
}


/**
 * Implementation of hook_settings
 */
function adsense_injector_settings() {
  $form['module_banner'] = array('#type' => 'markup', 
                                 '#value' => '<div style="border: solid 1px #eee; margin: .5em; padding: .5em;" <strong>Module development sponsored by <a href="http://exodusdev.com">Exodus Development</a></strong><br/>');
  $form['module_id'] = array('#type' => 'markup', '#value' =>  ADSENSE_INJECTOR_MODULE_VERSION .'<br/></div>');

  $form['node_ad_body_insertion'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#title' => t('Node body ad insertion'),
    '#description' => t('Requires adsense.module'),
  );

  if (module_exist('adsense')) {
    $form['node_ad_body_insertion']['adsense_injector_insert_body_ad'] =  
      array('#type' => 'checkbox', 
            '#title'=> t('Insert inline ad in node body on page views'), 
            '#default_value' => variable_get('adsense_injector_insert_body_ad', ADSENSE_INJECTOR_INSERT_BODY_AD_DEFAULT), 
            '#description' => t('Description'), 
            '#required'=>FALSE);
    $form['node_ad_body_insertion']['adsense_injector_body_minwords'] = 
      array('#type' => 'textfield',
            '#title'=> t('Minimum node body word count'),
            '#default_value' => variable_get('adsense_injector_body_minwords', ADSENSE_INJECTOR_BODY_MINWORDS_DEFAULT),
            '#description' => t('The minimum node body word count threshold - only inject if node body has at least this many words.'));
    
    $form['node_ad_body_insertion']['adsense_injector_body_adsense_format'] = 
      array('#type' => 'textfield',
            '#title'=> t('Ad Format'),
            '#default_value' => variable_get('adsense_injector_body_adsense_format', ADSENSE_INJECTOR_BODY_ADSENSE_FORMAT_DEFAULT),
            '#description' => t('Adsense module ad format string (example: 200x200) - see adsense.module help for list of supported formats.'));
    $form['node_ad_body_insertion']['adsense_injector_body_adsense_group'] = 
      array('#type' => 'textfield',
            '#title'=> t('Ad group'),
            '#default_value' => variable_get('adsense_injector_body_adsense_group', ADSENSE_INJECTOR_BODY_ADSENSE_GROUP_DEFAULT),
            '#description' => t('Adsense module group'));
    $form['node_ad_body_insertion']['adsense_injector_body_adsense_channel'] = 
      array('#type' => 'textfield',
            '#title'=> t('Ad channel'),
            '#default_value' => variable_get('adsense_injector_body_adsense_channel', ADSENSE_INJECTOR_BODY_ADSENSE_CHANNEL_DEFAULT),
            '#description' => t('Adsense module channel'));
    

  $form['node_ad_body_insertion']['formatting'] = 
    array(
          '#type' => 'fieldset',
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
          '#title' => t('Special Formatting'),
          '#description' => t('Formatting options'),
          );
    $form['node_ad_body_insertion']['formatting']['adsense_injector_body_ad_prefix'] = 
      array('#type' => 'textarea',
            '#title'=> t('Ad Prefix'),
            '#rows' => 3,
            '#cols' => 40,
            '#default_value' => variable_get('adsense_injector_body_ad_prefix', ADSENSE_INJECTOR_BODY_AD_PREFIX_DEFAULT),
            '#description' => t('Text to insert before adsense content'),
            '#required' => TRUE);
    $form['node_ad_body_insertion']['formatting']['adsense_injector_body_ad_suffix'] = 
      array('#type' => 'textarea',
            '#title'=> t('Ad Suffix'),
            '#rows' => 3,
            '#cols' => 40,
            '#default_value' => variable_get('adsense_injector_body_ad_suffix', ADSENSE_INJECTOR_BODY_AD_SUFFIX_DEFAULT),
            '#description' => t('Text to insert after  adsense content'));
    $form['node_ad_body_insertion']['formatting']['adsense_injector_body_ad_body_suffix'] = 
      array('#type' => 'textarea',
            '#title'=> t('Ad <strong>Body</strong> Suffix'),
            '#rows' => 3,
            '#cols' => 40,
            '#default_value' => variable_get('adsense_injector_body_ad_body_suffix', ADSENSE_INJECTOR_BODY_AD_BODY_SUFFIX_DEFAULT),
            '#description' => t('Text to append to node body'));

    $form['node_ad_body_insertion']['nodes'] = 
      array('#type' => 'fieldset',
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#title' => t('Node Types'),
            '#description' => t('Nodes types to display inline ads'),
            );

    /**
     * Enumerate node types, and set up form fields for each
     */
    $enabled_count = 0;
    foreach (node_get_types() as $type => $name) {
      $nodetypes[$type] = $name;
      $enabled = variable_get(ADSENSE_INJECTOR_INSERT_BODY_AD_NODETYPE . $type, FALSE);
      if ($enabled) $enabled_count++; 
      $form['node_ad_body_insertion']['nodes'][ADSENSE_INJECTOR_INSERT_BODY_AD_NODETYPE . $type] =  
        array('#type' => 'checkbox', 
              '#title'=> $name, 
              '#default_value' => $enabled, 
              '#description' => t('Display inline ads on %nodetype nodes', array('%nodetype' => $name)),
              '#required'=>FALSE);
      
    }

    // do some sanity checking
    if ($enabled_count == 0) {
      $form['node_ad_body_insertion']['nodes']['#collapsed'] = FALSE;
      $form['node_ad_body_insertion']['nodes']['no_nodes_enabled'] = array('#type' => 'markup', 
                                 '#value' => '<div style="padding: 1em; color:yellow; background-color:red;"><strong>No node types selected (no ads will be inserted!) </strong></div>');
    }
  }
  return $form;
}

