<?php
// $Id: xmlsitemap_user.install,v 1.6.2.5 2008/11/29 19:25:15 kiam Exp $

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_enable().
 */
function xmlsitemap_user_enable() {
  $weight = db_result(db_query("SELECT weight FROM {system} WHERE type = 'module' AND name = 'pathauto'"));
  if ($weight !== FALSE) {
    db_query("UPDATE {system} SET weight = %d WHERE type = 'module' AND name = 'xmlsitemap_user'", ++$weight);
  }
  db_query("INSERT INTO {xmlsitemap_user} (uid, last_changed)
    SELECT u.uid, u.created FROM {users} u
    LEFT JOIN {xmlsitemap_user} xu ON xu.uid = u.uid
    WHERE u.uid <> 0 AND xu.uid IS NULL"
  );
  db_query("INSERT INTO {xmlsitemap_user_role} (rid)
    SELECT r.rid FROM {role} r
    LEFT JOIN {xmlsitemap_user_role} xur ON xur.rid = r.rid
    WHERE r.rid > 2 AND xur.rid IS NULL"
  );
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_disable().
 */
function xmlsitemap_user_disable() {
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_schema().
 */
function xmlsitemap_user_schema() {
  $schema['xmlsitemap_user'] = array(
    'description' => t('The base table for xmlsitemap_user.'),
    'fields' => array(
      'uid' => array(
        'description' => t('The user ID.'),
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'last_changed' => array(
        'description' => t('Keeps track of new changes.'),
        'type' => 'int',
      ),
      'previously_changed' => array(
        'description' => t('Keeps track of old changes.'),
        'type' => 'int',
      ),
      'priority_override' => array(
        'description' => t('Stores the index value.'),
        'type' => 'float',
      ),
    ),
    'primary key' => array('uid'),
  );

  $schema['xmlsitemap_user_role'] = array(
    'description' => t('The base table for xmlsitemap.'),
    'fields' => array(
      'rid' => array(
        'description' => t('The role ID.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'priority' => array(
        'description' => t('Stores the index value.'),
        'type' => 'float',
      ),
    ),
    'primary key' => array('rid'),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function xmlsitemap_user_install() {
  drupal_install_schema('xmlsitemap_user');
}

/**
 * Implementation of hook_update_N().
 * Add missing URL aliases.
 */
function xmlsitemap_user_update_1() {
  $ret = array(update_sql("UPDATE {xmlsitemap_user} SET pid = NULL WHERE pid = 0"));
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = @update_sql("
        UPDATE {xmlsitemap_user} xu, {url_alias} ua SET xu.pid = ua.pid
        WHERE xu.pid IS NULL AND ua.src = CONCAT('user/', CAST(xu.uid AS CHAR))
      ");
      break;
    case 'pgsql':
      $ret[] = @update_sql("
        UPDATE {xmlsitemap_user} SET pid = {url_alias}.pid FROM {url_alias}
        WHERE {xmlsitemap_user}.pid IS NULL AND {url_alias}.src = CONCAT('user/', CAST(uid AS VARCHAR))
      ");
      break;
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6000() {
  $ret = array();
  $result = array();
  @db_drop_index($result, 'xmlsitemap_user', 'pid');
  if ($result[0]['success']) {
    $ret = $result;
  }
  $result = array();
  @db_drop_field($result, 'xmlsitemap_user', 'pid');
  if ($result[0]['success']) {
    $ret = array_merge($ret, $result);
  }
  $result = array();
  @db_drop_index($result, 'xmlsitemap_user_role', 'pid');
  if ($result[0]['success']) {
    $ret = array_merge($ret, $result);
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6100() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_user_update_6101() {
  return xmlsitemap_user_update_6000();
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_user_uninstall() {
  drupal_uninstall_schema('xmlsitemap_user');
}
