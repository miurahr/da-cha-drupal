<?php
// $Id: xmlsitemap.install,v 1.5.2.19 2008/11/28 20:48:55 kiam Exp $

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_enable().
 */
function xmlsitemap_enable() {
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_schema().
 */
function xmlsitemap_schema() {
  $schema['xmlsitemap'] = array(
    'description' => t('The base table for xmlsitemap.'),
    'fields' => array(
      'loc' => array(
        'description' => t('The path of this node.'),
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
      ),
      'lastmod' => array(
        'description' => t('Last change time.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changefreq' => array(
        'description' => t('The frequency of the changes.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'priority' => array(
        'description' => t('The priority of this node in the sitemap.'),
        'type' => 'float',
        'not null' => TRUE,
      ),
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function xmlsitemap_install() {
  // Create my tables.
  db_query("DELETE FROM {url_alias} WHERE dst LIKE 'sitemap%.xml'");
  drupal_install_schema('xmlsitemap');
  if ($GLOBALS['db_type'] == 'pgsql') {
    db_query('CREATE OR REPLACE FUNCTION first(anyelement, anyelement) RETURNS anyelement AS \'SELECT COALESCE($1, $2);\' LANGUAGE \'sql\';');
    @db_query("DROP AGGREGATE first(anyelement)");
    db_query("CREATE AGGREGATE first(
      sfunc = first,
      basetype = anyelement,
      stype = anyelement
    );");
  }
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6000() {
  $ret = array();
  // Drop  unused tables.
  if (db_table_exists('xmlsitemap_additional')) {
    db_drop_table($ret, 'xmlsitemap_additional');
  }
  // Remove unused variables.
  if (db_result(db_query("SELECT COUNT(*) FROM {variable} WHERE name = 'xmlsitemap\_%'"))) {
    $ret[] = update_sql("DELETE FROM {variable} WHERE name = 'xmlsitemap\_%'");
  }
  if (_xmlsitemap_delete_tmp_files(file_directory_path() .'/xmlsitemap')) {
    $ret[] = array(
      'success' => TRUE,
      'query' => 'DELETE TEMPORARY FILES',
    );
  }
  if (!db_table_exists('xmlsitemap')) {
    $schema = xmlsitemap_schema();
    db_create_table($ret, 'xmlsitemap', $schema['xmlsitemap']);
  }
  if ($GLOBALS['db_type'] == 'pgsql') {
    $ret[] = update_sql('CREATE OR REPLACE FUNCTION first(anyelement, anyelement) RETURNS anyelement AS \'SELECT COALESCE($1, $2);\' LANGUAGE \'sql\';');
    $result = @update_sql("DROP AGGREGATE first(anyelement)");
    if ($result['success']) {
      $ret[] = $result;
    }
    $ret[] = update_sql("CREATE AGGREGATE first(
      sfunc = first,
      basetype = anyelement,
      stype = anyelement
    );");
  }
  cache_clear_all(xmlsitemap_url('sitemap.xml', NULL, NULL, NULL, TRUE), 'cache_page', TRUE);
  $ret[] = array(
    'success' => TRUE,
    'query' => 'CLEAR MODULE CACHE',
  );
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6100() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6101() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6102() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6103() {
  return array();
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6104() {
  $ret = array();
  @db_drop_primary_key($ret, 'xmlsitemap');
  @db_change_field($ret, 'xmlsitemap', 'loc', 'loc', 
    array(
      'description' => t('The path of this node.'),
      'type' => 'varchar',
      'length' => 256,
      'not null' => TRUE,
      'default' => '',
    )
  );
  if (!variable_get('xmlsitemap_update', FALSE)) {
    variable_set('xmlsitemap_update', TRUE);
    $ret[] = array(
      'success' => TRUE,
      'query' => 'FORCE SITEMAP UPDATE',
    );
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6105() {
  return array();
}

/**
 * Implementation of hook_update_N().
 * Try to remove any temporary files left.
 */
function xmlsitemap_update_6106() {
  $ret = array();
  if (_xmlsitemap_delete_tmp_files(file_directory_path() .'/xmlsitemap')) {
    $ret[] = array(
      'success' => TRUE,
      'query' => 'DELETE TEMPORARY FILES',
    );
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 * Try to remove any temporary files left.
 */
function xmlsitemap_update_6107() {
  $ret = array();
  @db_change_field($ret, 'xmlsitemap', 'lastmod', 'lastmod', 
    array(
      'description' => t('Last change time.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    )
  );
  @db_change_field($ret, 'xmlsitemap', 'changefreq', 'changefreq', 
    array(
      'description' => t('The frequency of the changes.'),
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    )
  );
  if (!variable_get('xmlsitemap_update', FALSE)) {
    variable_set('xmlsitemap_update', TRUE);
    $ret[] = array(
      'success' => TRUE,
      'query' => 'FORCE SITEMAP UPDATE',
    );
  }
  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function xmlsitemap_update_6108() {
  menu_rebuild();
  return array(
    0 => array(
      'success' => TRUE,
      'query' => 'UPDATE DRUPAL MENUS',
    )
  );
}

/**
 * Implementation of hook_uninstall().
 */
function xmlsitemap_uninstall() {
  // Drop the tables.
  drupal_uninstall_schema('xmlsitemap');
  // Remove the used variables.
  db_query("DELETE FROM {variable} WHERE name LIKE 'xmlsitemap\_%'");
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Remove temporary files, and folders up to four levels.
 *
 * @param $path
 *  The path of the folder to remove.
 * @return
 *  Boolean value; TRUE on success.
 */
function _xmlsitemap_delete_tmp_files($path) {
  static $count = 0;
  $error = FALSE;
  $count++;
  if ($dir = @opendir($path)) {
    while (($file = readdir($dir)) !== FALSE) {
      if ($file != '.' && $file != '..') {
        $fpath = "$path/$file";
        if (is_dir($fpath)) {
          if ($count < 5) {
            $error |= _xmmsitemap_delete_temp_files($fpath);
          }
        }
        else {
          $error |= @unlink($fpath);
        }
      }
    }
    closedir($dir);
    $error |= @rmdir($path);
  }
  return $error;
}
